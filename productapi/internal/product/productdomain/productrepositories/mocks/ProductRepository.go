// Code generated by mockery v2.30.16. DO NOT EDIT.

package mocks

import (
	context "context"
	productentities "medium/m/v2/internal/product/productdomain/productentities"

	mock "github.com/stretchr/testify/mock"
)

// ProductRepository is an autogenerated mock type for the ProductRepository type
type ProductRepository struct {
	mock.Mock
}

type ProductRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *ProductRepository) EXPECT() *ProductRepository_Expecter {
	return &ProductRepository_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: _a0, product
func (_m *ProductRepository) Create(_a0 context.Context, product *productentities.Product) error {
	ret := _m.Called(_a0, product)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *productentities.Product) error); ok {
		r0 = rf(_a0, product)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ProductRepository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type ProductRepository_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - _a0 context.Context
//   - product *productentities.Product
func (_e *ProductRepository_Expecter) Create(_a0 interface{}, product interface{}) *ProductRepository_Create_Call {
	return &ProductRepository_Create_Call{Call: _e.mock.On("Create", _a0, product)}
}

func (_c *ProductRepository_Create_Call) Run(run func(_a0 context.Context, product *productentities.Product)) *ProductRepository_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*productentities.Product))
	})
	return _c
}

func (_c *ProductRepository_Create_Call) Return(_a0 error) *ProductRepository_Create_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ProductRepository_Create_Call) RunAndReturn(run func(context.Context, *productentities.Product) error) *ProductRepository_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: _a0, id
func (_m *ProductRepository) Delete(_a0 context.Context, id string) error {
	ret := _m.Called(_a0, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(_a0, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ProductRepository_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type ProductRepository_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - _a0 context.Context
//   - id string
func (_e *ProductRepository_Expecter) Delete(_a0 interface{}, id interface{}) *ProductRepository_Delete_Call {
	return &ProductRepository_Delete_Call{Call: _e.mock.On("Delete", _a0, id)}
}

func (_c *ProductRepository_Delete_Call) Run(run func(_a0 context.Context, id string)) *ProductRepository_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *ProductRepository_Delete_Call) Return(_a0 error) *ProductRepository_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ProductRepository_Delete_Call) RunAndReturn(run func(context.Context, string) error) *ProductRepository_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// GetByID provides a mock function with given fields: _a0, id
func (_m *ProductRepository) GetByID(_a0 context.Context, id string) (*productentities.Product, error) {
	ret := _m.Called(_a0, id)

	var r0 *productentities.Product
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*productentities.Product, error)); ok {
		return rf(_a0, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *productentities.Product); ok {
		r0 = rf(_a0, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*productentities.Product)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(_a0, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProductRepository_GetByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByID'
type ProductRepository_GetByID_Call struct {
	*mock.Call
}

// GetByID is a helper method to define mock.On call
//   - _a0 context.Context
//   - id string
func (_e *ProductRepository_Expecter) GetByID(_a0 interface{}, id interface{}) *ProductRepository_GetByID_Call {
	return &ProductRepository_GetByID_Call{Call: _e.mock.On("GetByID", _a0, id)}
}

func (_c *ProductRepository_GetByID_Call) Run(run func(_a0 context.Context, id string)) *ProductRepository_GetByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *ProductRepository_GetByID_Call) Return(_a0 *productentities.Product, _a1 error) *ProductRepository_GetByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ProductRepository_GetByID_Call) RunAndReturn(run func(context.Context, string) (*productentities.Product, error)) *ProductRepository_GetByID_Call {
	_c.Call.Return(run)
	return _c
}

// Search provides a mock function with given fields: _a0, productType
func (_m *ProductRepository) Search(_a0 context.Context, productType string) ([]*productentities.Product, error) {
	ret := _m.Called(_a0, productType)

	var r0 []*productentities.Product
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]*productentities.Product, error)); ok {
		return rf(_a0, productType)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []*productentities.Product); ok {
		r0 = rf(_a0, productType)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*productentities.Product)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(_a0, productType)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProductRepository_Search_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Search'
type ProductRepository_Search_Call struct {
	*mock.Call
}

// Search is a helper method to define mock.On call
//   - _a0 context.Context
//   - productType string
func (_e *ProductRepository_Expecter) Search(_a0 interface{}, productType interface{}) *ProductRepository_Search_Call {
	return &ProductRepository_Search_Call{Call: _e.mock.On("Search", _a0, productType)}
}

func (_c *ProductRepository_Search_Call) Run(run func(_a0 context.Context, productType string)) *ProductRepository_Search_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *ProductRepository_Search_Call) Return(_a0 []*productentities.Product, _a1 error) *ProductRepository_Search_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ProductRepository_Search_Call) RunAndReturn(run func(context.Context, string) ([]*productentities.Product, error)) *ProductRepository_Search_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: _a0, productToUpdate
func (_m *ProductRepository) Update(_a0 context.Context, productToUpdate *productentities.Product) error {
	ret := _m.Called(_a0, productToUpdate)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *productentities.Product) error); ok {
		r0 = rf(_a0, productToUpdate)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ProductRepository_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type ProductRepository_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - _a0 context.Context
//   - productToUpdate *productentities.Product
func (_e *ProductRepository_Expecter) Update(_a0 interface{}, productToUpdate interface{}) *ProductRepository_Update_Call {
	return &ProductRepository_Update_Call{Call: _e.mock.On("Update", _a0, productToUpdate)}
}

func (_c *ProductRepository_Update_Call) Run(run func(_a0 context.Context, productToUpdate *productentities.Product)) *ProductRepository_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*productentities.Product))
	})
	return _c
}

func (_c *ProductRepository_Update_Call) Return(_a0 error) *ProductRepository_Update_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ProductRepository_Update_Call) RunAndReturn(run func(context.Context, *productentities.Product) error) *ProductRepository_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewProductRepository creates a new instance of ProductRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewProductRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *ProductRepository {
	mock := &ProductRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
